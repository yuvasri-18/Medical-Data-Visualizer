# -*- coding: utf-8 -*-
"""Medical Data Visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFZr8Q8U4rT_6SPtDcJA0lrrH7u1aJGk
"""

import pandas as pd
import numpy as np

np.random.seed(0)

n = 1000
df = pd.DataFrame({
    'id': np.arange(n),
    'age': np.random.randint(14000, 22000, size=n),  # age in days
    'height': np.random.normal(165, 10, size=n).astype(int),
    'weight': np.random.normal(70, 15, size=n).round(1),
    'gender': np.random.randint(1, 3, size=n),
    'ap_hi': np.random.randint(90, 180, size=n),
    'ap_lo': np.random.randint(60, 120, size=n),
    'cholesterol': np.random.randint(1, 4, size=n),
    'gluc': np.random.randint(1, 4, size=n),
    'smoke': np.random.randint(0, 2, size=n),
    'alco': np.random.randint(0, 2, size=n),
    'active': np.random.randint(0, 2, size=n),
    'cardio': np.random.randint(0, 2, size=n),
})

df.to_csv("medical_examination.csv", index=False)

print("medical_examination.csv created!")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Load data
df = pd.read_csv("medical_examination.csv")

# Add 'overweight' column
df['overweight'] = (df['weight'] / ((df['height'] / 100) ** 2) > 25).astype(int)

# Normalize cholesterol and glucose
df['cholesterol'] = (df['cholesterol'] > 1).astype(int)
df['gluc'] = (df['gluc'] > 1).astype(int)

# Draw categorical plot
def draw_cat_plot():
    # Melt data
    df_cat = pd.melt(
        df,
        id_vars='cardio',
        value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight']
    )

    # Group and count
    df_cat = df_cat.groupby(['cardio', 'variable', 'value'])['value'].count().reset_index(name='total')

    # Plot
    fig = sns.catplot(
        data=df_cat,
        x='variable',
        y='total',
        hue='value',
        col='cardio',
        kind='bar'
    ).fig

    return fig

# Draw heatmap
def draw_heat_map():
    # Clean data
    df_heat = df[
        (df['ap_lo'] <= df['ap_hi']) &
        (df['height'] >= df['height'].quantile(0.025)) &
        (df['height'] <= df['height'].quantile(0.975)) &
        (df['weight'] >= df['weight'].quantile(0.025)) &
        (df['weight'] <= df['weight'].quantile(0.975))
    ]

    # Correlation matrix
    corr = df_heat.corr()

    # Upper triangle mask
    mask = np.triu(np.ones_like(corr, dtype=bool))

    # Plot
    fig, ax = plt.subplots(figsize=(12, 10))
    sns.heatmap(
        corr,
        mask=mask,
        annot=True,
        fmt='.1f',
        center=0,
        square=True,
        linewidths=.5,
        cbar_kws={"shrink": 0.5}
    )

    return fig

draw_cat_plot()
plt.show()

draw_heat_map()
plt.show()